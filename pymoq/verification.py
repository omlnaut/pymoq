# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_Verfiy.ipynb.

# %% auto 0
__all__ = ['VerifiedCalls']

# %% ../nbs/06_Verfiy.ipynb 16
@dataclass
class VerifiedCalls:
    verified_calls: list[tuple[list[Any], dict[str, Any]]]
    all_calls: list[tuple[list[Any], dict[str, Any]]]
    
    @property
    def verified(self): return len(self.verified_calls)

    def times(self, amount: int):
        """Asserts that the number of verified calls is  exactly `amount`"""
        msg = self._build_error_msg(f"Expected {amount} calls, got {self.verified}.")
        assert self.verified==amount, msg
        
    def never(self):
        """Asserts that no verified call was made"""
        self.times(0)
        
    def more_than(self, lower_bound: int):
        """Asserts that at more than `lower_bound` verified calls were made"""
        msg = self._build_error_msg(f"Expected more than {lower_bound} calls, got {self.verified}.")
        assert self.verified > lower_bound, msg
        
    def _build_error_msg(self, general_msg: str) -> str:
        calls_str = "Matched Calls:\n\t" + "\n\t".join(map(str, self.verified_calls))
        total_calls_str = "All Calls:\n\t" + "\n\t".join(map(str, self.all_calls))
        
        msg = "\n".join((general_msg, calls_str, total_calls_str))
        return msg

# %% ../nbs/06_Verfiy.ipynb 17
@patch_to(FunctionMock)
def verify(self, *args, **kwargs) -> VerifiedCalls:
    kwargs = self.fill_up_arg_list(args, kwargs)
    sign_val = signature_validator_from_arguments(self._argument_names, *args, **kwargs)
    calls = []
    
    for call_args, call_kwargs in self._calls:
        call_kwargs = self.fill_up_arg_list(call_args, call_kwargs)
        if sign_val.is_valid(*call_args, **call_kwargs):
            calls.append((call_args, call_kwargs))
    return VerifiedCalls(calls, self._calls)
