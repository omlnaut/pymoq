# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_signature_validators.ipynb.

# %% auto 0
__all__ = ['SignatureValidator', 'signature_validator_from_arguments']

# %% ../nbs/02_signature_validators.ipynb 1
from .argument_validators import ArgumentValidator, ArgumentFunctionValidator
from typing import Any
from fastcore.basics import patch_to

# %% ../nbs/02_signature_validators.ipynb 5
class SignatureValidator:
    "This class holds a list of argument validators and can evaluate a list of arguments against those validators"
    def __init__(self, argument_validators: list[ArgumentValidator]):
        self.argument_validators = argument_validators
        self._named_validators = {validator.name: validator
                                  for validator in self.argument_validators}
        
        self._positional_validators = {validator.position: validator
                                      for validator in self.argument_validators}
        
        names = [validator.name for validator in self.argument_validators]
        if len(names) != len(set(names)):
            raise ValueError(f"List of argument validators contains duplicate names: {names}")
            
        positions = [validator.position for validator in self.argument_validators]
        if len(positions) != len(set(positions)):
            raise ValueError(f"List of argument validators contains duplicate positions: {positions}")
        
    def is_valid(self, *args: list[Any], **kwargs: dict[str, Any]) -> bool:
        if len(args) > len(self.argument_validators): return False
    
        # positional arguments
        for position, value in enumerate(args):
            if not position in self._positional_validators.keys(): return False
            
            if not self._positional_validators[position].is_valid(value): return False
        
        # named arguments
        for name,value in kwargs.items():
            if name not in self._named_validators: return False
        
            if not self._named_validators[name].is_valid(value): return False
        
        return True

# %% ../nbs/02_signature_validators.ipynb 19
def signature_validator_from_arguments(*args, **kwargs) -> SignatureValidator:
    "Construct a `SignatureValidator` by smartly constructing `ArgumentValidators` when no actual argument validators are given"
    return SignatureValidator(args)
