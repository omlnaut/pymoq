# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_validators.ipynb.

# %% auto 0
__all__ = ['ArgumentValidator', 'ArgumentFunctionValidator', 'SignatureValidator']

# %% ../nbs/01_validators.ipynb 1
from typing import Protocol, Any, runtime_checkable
from .core import AnyCallable

# %% ../nbs/01_validators.ipynb 7
@runtime_checkable
class ArgumentValidator(Protocol):
    @property
    def name() -> str|None:
        ...
        
    "Interface for all argument validators."
    def is_valid(self, argument: Any) -> bool:
        ...

# %% ../nbs/01_validators.ipynb 9
class ArgumentFunctionValidator:
    "Validate an argument by evaluating an arbitrary function"
    def __init__(self, func: AnyCallable[bool], name: str|None = None):
        self._func = func
        self._name = name
        
    @property
    def name(self) -> str|None:
        return self._name
        
    def is_valid(self, argument: Any) -> bool:
        return self._func(argument)
    
assert isinstance(ArgumentFunctionValidator, ArgumentValidator), "ArgumentFunctionValidator does not implement the ArgumentValidator-Protocol"

# %% ../nbs/01_validators.ipynb 16
class SignatureValidator:
    def __init__(self, argument_validators: list[ArgumentValidator]):
        self.argument_validators = argument_validators
        self._named_validators = {validator.name: validator
                                  for validator in self.argument_validators
                                  if validator.name is not None }
        if len(self._named_validators) != len(set(self._named_validators.keys())):
            raise ValueError(f"List of argument validators contains duplicate names: {list(self._named_validators.keys())}")
        
    def is_valid(self, *args: list[Any], **kwargs: dict[str, Any]) -> bool:
        if len(args) > len(self.argument_validators): return False
    
        # positional arguments
        if not all(argument_validator.is_valid(arg) for arg,argument_validator in zip(args, self.argument_validators)):
            return False
        
        # named arguments
        for name,value in kwargs.items():
            if name not in self._named_validators: return False
        
            if not self._named_validators[name].is_valid(value): return False
        
        return True
